
// # settings.scss
// * CSS variable & Sass mixin settings / config
// * CSS変数とSass Mixin(ミックスイン)設定ファイル

// ---

@use "sass:map";

// ## Sass variables
// ### Media Queries variable - map type
// * ブレイクポイントはコンピューターモニター/webと親和性高い「8(px)の倍数」基準
// * 以下の6タイプのメディアクエリを使用してスタイルを書く
// * セレクタ内でスタイルの上書き合戦が発生(汚染)しないことを意識して記述

// ブレイクポイントの定義
// |キー名|画面サイズ|想定デバイス|
// |:--|:--|:--|
// | sp     | 767px以下   | スマートフォン(smart phone)                 |
// | tb     | 768~1023px  | タブレット(tablet)                          |
// | dt     | 1024以上    | デスクトップPC(desktop)                     |
// | dtl    | 1024~1599px | デスクトップPC・小型サイズ(desktop low)     |
// | dth    | 1600以上    | デスクトップPC・大型サイズ(desktop high)    |
// | sp-tb  | 1023以下    | スマホ~タブレットの画面サイズをカバー       |
// | tb-dth | 768以上     | タブレット~デスクトップの画面サイズをカバー |

$breakpointVar: (
  "sp": "print, screen and (max-width:47.96875em)",
  "tb": "print, screen and (min-width:48em) and (max-width:64em)",
  "dt": "print, screen and (min-width:64.0625em)",
  "dtl": "print, screen and (min-width:64.0625em) and (max-width:100em)",
  "dth": "print, screen and (min-width:100.0625em)",
  "sp-tb": "print, screen and (max-width:64em)",
  "tb-dth": "print, screen and (min-width:48em)"
) !default;

// ---

// ## Sass Mixin
// ### Media Queries Mixin
@mixin mq($breakpoint) {
  @media #{map.get($breakpointVar, $breakpoint)} {
    @content;
  }
}

// ### font-family Mixin
// #### 見出しフォント用
// @mixin homeSectionHeadingFont {
//   @include mq(sp-tb) {
//     font-family: var(--home-section-heading-font-mb);
//   }
//   @include mq(tb-dth) {
//     font-family: var(--home-section-heading-font-dt);
//   }
// }

// #### 段落文章および通常フォント用
// @mixin sentenceFont {
//   @include mq(sp-tb) {
//     font-family: var(--common-font-mb);
//   }
//   @include mq(tb-dth) {
//     font-family: var(--common-font-dt);
//   }
// }

// #### 欧文フォント用
// @mixin engFont {
//   font-family: var(--english-font);
//   @media print {
//     font-family: var(--english-font-print);
//   }
// }

// ### content width Mixin
@mixin contentWidth() {
  @include mq(tb-dth) {
    width: 90%;
    max-width: 64.0625em;
    min-width: 48rem;
  }
  @include mq(sp) {
    width: 90vw;
  }
  margin: {
    right: auto;
    left: auto;
  }
}

// ---

// ### calculation view width Mixin
@function calcSize($num, $unit) {
  // ここに利用する単位の式を追加していく
  @if ($unit=="vw") {
    @return $num / $maxWidth * 100#{$unit};
  }
}

// ### ratina support Mixin
// * background-imageのRetina対応を行う
// * 使用例）@include retinaImage('/img/bg_main_visual','png');
@mixin retinaImage($file, $type) {
  background-image: url($file+'.'+$type);
  @media (-webkit-min-device-pixel-ratio: 2),
    (-moz-min-device-pixel-ratio: 2) {
    & {
      background-image: url($file+'@2x.'+$type);
    }
  }
}

// ### icon Mixin
// #### 線
@mixin line($pos, $width) {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    left: 0;
    width: $width;
    height: 2px;
    background-color: var(--black);
    @if ($pos=="top") {
      top: 0;
    }
    @if ($pos=="bottom") {
      bottom: 0;
    }
  }
}

// #### 棒なし矢印 (>)
@mixin arrowHead($size, $width, $pos, $baseColor) {
  content: "";
  display: block;
  position: absolute;
  top: 50%;
  width: #{$size}px;
  height: #{$size}px;
  border-color: $baseColor;
  border-style: solid;
  box-sizing: border-box;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  transition:
    transform cubic-bezier(.215, .61, .355, 1) .15s,
    border-color cubic-bezier(.215, .61, .355, 1) .15s;
  @if $pos=="left" {
    border-width: 0 0 $width + px $width + px;
    transform: translate(0, -50%) rotate(45deg);
  }
  @else if $pos=="top" {
    border-width: $width + px 0 0 $width + px;
    transform: translate(0, -50%) rotate(45deg);
  }
  @else if $pos=="bottom" {
    border-width: 0 $width + px $width + px 0;
    transform: translate(0, -50%) rotate(45deg);
  }
  @else {
    border-width: $width + px $width + px 0 0;
    transform: translate(0, -50%) rotate(45deg);
  }
}

// #### インライン棒なし矢印 (>)
@mixin inlineArrowHead($size, $pos, $baseColor) {
  content: "";
  display: inline-block;
  position: relative;
  top: -.1em;
  width: #{$size}px;
  height: #{$size}px;
  border-top: 1.5px solid $baseColor;
  border-right: 1.5px solid $baseColor;
  @if $pos=="top" {
    transform: rotate(-45deg);
  }
  @else if $pos=="right" {
    transform: rotate(45deg);
  }
  @else if $pos=="bottom" {
    transform: rotate(135deg);
  }
  @else if $pos=="left" {
    transform: rotate(-135deg);
  }
}

// #### 矢印 (→)
@mixin arrow($direction, $color, $color2) {
  @if $direction=="right"or $direction=="left" {
    span {
      top: calc(50% - 2px);
      height: 4px;
      @include mq(sp) {
        width: 14px;
      }
      @include mq(tb-dh) {
        width: 20px;
      }
      .browser-is-ie & {
        @include mq(tb-dh) {
          top: calc(36% - 2px);
        }
      }
      &:after {
        bottom: 0;
        left: 0;
        height: 1px;
        @include mq(sp) {
          width: 10px;
        }
        @include mq(tb-dh) {
          width: 16px;
        }
      }
    }
  }
  @if $direction=="top"or $direction=="bottom" {
    span {
      right: 0;
      width: 4px;
      @include mq(sp) {
        top: calc(50% - 6px);
        height: 14px;
      }
      @include mq(tb-dh) {
        top: calc(50% - 7px);
        height: 15px;
      }
      &:after {
        width: 1px;
        height: 10px;
      }
    }
  }
  @if $direction=="right" {
    span {
      &:before {
        right: 0;
        bottom: 0;
        border-color: transparent transparent transparent $color;
        border-width: 4px 0 0 4px;
      }
    }
    &:hover,
    &:focus,
    &:hover &,
    a:focus & {
      span {
        &:before {
          @include mq(tb-dh) {
            border-color: transparent transparent transparent $color2;
          }
        }

        &:after {
          @include mq(tb-dh) {
            background-color: $color2;
          }
        }

        &:nth-of-type(1) {
          @include mq(tb-dh) {
            transform: translateX(8px);
          }
        }
      }
    }
  }
  @if $direction=="left" {
    span {
      &:before {
        bottom: 0;
        left: 0;
        border-color: transparent $color transparent transparent;
        border-width: 4px 4px 0 0;
      }
      &:after {
        right: 0;
        left: auto;
      }
    }
    &:hover,
    &:focus,
    &:hover &,
    a:focus & {
      span {
        &:before {
          @include mq(tb-dh) {
            border-color: transparent $color2 transparent transparent;
          }
        }

        &:after {
          @include mq(tb-dh) {
            background-color: $color2;
          }
        }
        &:nth-of-type(1) {
          @include mq(tb-dh) {
            transform: translateX(-8px);
          }
        }
      }
    }
  }
  @if $direction=="bottom" {
    span {
      &:before {
        right: 0;
        bottom: 0;
        border-color: $color transparent transparent transparent;
        border-width: 5px 3.5px 0;
      }
      &:nth-of-type(2) {
        transform: translateY(-15px);
      }
    }
    &:hover,
    &:focus,
    &:hover &,
    a:focus & {
      span {
        &:before {
          @include mq(tb-dh) {
            border-color: $color2 transparent transparent transparent;
          }
        }
        &:after {
          @include mq(tb-dh) {
            background-color: $color2;
          }
        }
        &:nth-of-type(1) {
          @include mq(tb-dh) {
            transform: translateY(8px);
          }
        }
      }
    }
  }
  @if $direction=="top" {
    span {
      &:before {
        top: 0;
        right: 0;
        border-color: transparent transparent $color2 transparent;
        border-width: 0 3.5px 5px;
      }
      &:after {
        bottom: 0;
        left: 0;
      }
      &:nth-of-type(2) {
        transform: translateY(15px);
      }
    }
    &:hover,
    &:focus,
    &:hover &,
    a:focus & {
      span {
        &:before {
          @include mq(tb-dh) {
            border-color: transparent transparent $color2 transparent;
          }
        }
        &:after {
          @include mq(tb-dh) {
            background-color: $color2;
          }
        }
        &:nth-of-type(1) {
          @include mq(tb-dh) {
            transform: translateY(-8px);
          }
        }
      }
    }
  }
  span {
    position: absolute;
    transition: all .2s ease;
    &:before {
      content: "";
      position: absolute;
      border-style: solid;
      transition: all .2s ease;
    }
    &:after {
      content: "";
      position: absolute;
      background-color: $color;
      transition: all .2s ease;
    }
  }
  &:hover,
  &:focus,
  &:hover &,
  a:focus & {
    @include mq(tb-dh) {
      color: $color2;
    }
  }
}

// #### 三角形
@mixin triangle($width, $height, $pos, $color) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border-style: solid;
  transition:
    transform cubic-bezier(.215, .61, .355, 1) .15s,
    border-color cubic-bezier(.215, .61, .355, 1) .15s;
  @if $pos=="bottom" {
    border-top: $height + px $color solid;
    border-right: $width/2 + px transparent solid;
    border-bottom: 0 + px transparent solid;
    border-left: $width/2 + px transparent solid;
  }
  @if $pos=="top" {
    border-top: 0 + px transparent solid;
    border-right: $width/2 + px transparent solid;
    border-bottom: $height + px $color solid;
    border-left: $width/2 + px transparent solid;
  }
  @if $pos=="left" {
    border-top: $height/2 + px transparent solid;
    border-right: $width + px $color solid;
    border-bottom: $height/2 + px transparent solid;
    border-left: 0 + px transparent solid;
  }
  @if $pos=="right" {
    border-top: $height/2 + px transparent solid;
    border-right: 0 + px transparent solid;
    border-bottom: $height/2 + px transparent solid;
    border-left: $width + px $color solid;
  }
}

// #### 別窓(target="_blank"用)
@mixin blank($width, $height, $pos, $color, $top) {
  position: relative;
  &:before {
    content: "";
    display: inline-block;
    position: absolute;
    top: calc(#{$top}px + 3px);
    width: calc(#{$width}px - 2px);
    height: calc(#{$height}px - 2px);
    box-sizing: border-box;
    &:hover,
    &:focus {
      transition: transform cubic-bezier(.215, .61, .355, 1) .15s, border-color cubic-bezier(.215, .61, .355, 1) .15s;
    }
    border: {
      width: 0 0 2px 2px;
      color: $color;
      style: solid;
    }
    #{$pos}: -.9rem;
  }
  &:after {
    content: "";
    display: inline-block;
    position: absolute;
    top: #{$top}px;
    width: calc(#{$width}px - 2px);
    height: calc(#{$height}px - 2px);
    border: 2px solid $color;
    box-sizing: border-box;
    @if $pos == "right" {
      margin-left: .4rem;
    }
    &:hover,
    &:focus {
      transition: transform cubic-bezier(.215, .61, .355, 1) .15s, border-color cubic-bezier(.215, .61, .355, 1) .15s;
    }
    #{$pos}: -1.1rem;
  }
}

// #### 「＋」
@mixin plus($size, $width, $baseColor) {
  position: absolute;
  top: calc(50% - #{$size}px / 2);
  width: #{$size}px;
  height: #{$size}px;
  &:before {
    content: "";
    display: inline-block;
    position: absolute;
    top: 0;
    left: calc(50% - #{$width}px/2);
    width: #{$width}px;
    height: #{$size}px;
    background-color: $baseColor;
  }
  &:after {
    content: "";
    display: inline-block;
    position: absolute;
    top: calc(50% - #{$width}px/2);
    left: 0;
    width: #{$size}px;
    height: #{$width}px;
    background-color: $baseColor;
  }
}

// ### layout & arrangement Mixin
// #### block要素のセンター配置
@mixin centerLayout($width, $max-width: false) {
  display: block;
  @if $max-width {
    width: $width;
    max-width: $max-width;
  }
  @else {
    width: $width;
  }
  margin: {
    right: auto;
    left: auto;
  }
}

// #### display: flex;を用いた上下左右中央配置
@mixin centeringFlex {
  display: flex;
  align-items: center;
  justify-content: center;
}

// #### absoluteを用いた上下中央配置
@mixin verticalCentering {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

// #### absoluteを用いた上下左右中央配置 いずれかも選択可能
@mixin centeringElements($horizontal: true, $vertical: true) {
  position: absolute;
  @if $horizontal and $vertical {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @else if $horizontal {
    left: 50%;
    transform: translate(-50%, 0);
  }
  @else if $vertical {
    top: 50%;
    transform: translate(0, -50%);
  }
}

// #### block要素の縦横比率固定
@mixin aspectRatio($width, $height, $image: null) {
  display: block;
  width: 100%;
  height: 0;
  padding-top: ($height / $width) * 100%;
  @if $image != null {
    background: url($image) 50% 50% no-repeat;
    background-size: cover;
  }
}

// ### その他mixin
// #### モーション中の画像のにじみを抑える
@mixin bugfixImgMotion($duration) {
  backface-visibility: visible;
  animation: bugfixImgMotion #{$duration} linear 0s 1 normal;
}

// #### テキストリンクのhoverエフェクト
// @mixin textHover {
//   &:hover,
//   &:focus {
//    (you set)
//   }
// }

// ### figure Mixin
// #### 正円
@mixin circle($size, $color) {
  width: $size + rem;
  height: $size + rem;
  background-color: $color;
  border-radius: 50%;
}